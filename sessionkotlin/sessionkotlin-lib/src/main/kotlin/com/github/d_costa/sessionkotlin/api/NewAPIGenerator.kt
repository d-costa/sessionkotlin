package com.github.d_costa.sessionkotlin.api

import com.github.d_costa.sessionkotlin.dsl.RootEnv
import com.github.d_costa.sessionkotlin.dsl.SKRole
import com.github.d_costa.sessionkotlin.util.asClassname
import com.github.d_costa.sessionkotlin.util.asPackageName
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.TypeSpec
import java.io.File

internal open class NewAPIGenerator(val globalEnv: RootEnv) {
    companion object {
        const val GENERATED_COMMENT = "This file was generated by sessionkotlin. Do not change it."
    }

    protected val basePackageName: String = globalEnv.protocolName.asPackageName()
    protected val protocolClassName = globalEnv.protocolName.asClassname()
    protected val roleMap = mutableMapOf<SKRole, ClassName>()
    protected val files = mutableListOf<FileSpec>()

    init {
        genRoles()
    }

    private fun genRoles() {
        val fileSpecBuilder = FileSpec.builder(
            packageName = basePackageName,
            fileName = "${protocolClassName}Roles"
        )
        globalEnv.roles.forEach {
            val className = ClassName(basePackageName, it.toString())
            roleMap[it] = className
            fileSpecBuilder
                .addType(
                    TypeSpec.objectBuilder(className)
                        .superclass(SKGenRole::class)
                        .build()
                )
        }
        files.add(fileSpecBuilder.build())
    }

    internal fun writeTo(directory: File) {
        for (f in files) {
            f.writeTo(directory)
        }
    }
}
