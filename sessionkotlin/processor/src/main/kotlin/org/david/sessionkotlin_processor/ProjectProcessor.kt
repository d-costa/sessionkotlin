/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.david.sessionkotlin_processor

import com.google.devtools.ksp.processing.*
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.ksp.writeTo

class ProjectProcessor(
    private val logger: KSPLogger,
    private val codeGenerator: CodeGenerator,
) : SymbolProcessor {

    override fun process(resolver: Resolver): List<KSAnnotated> {
        val packageName = "org.david.sessionkotlin_lib.annotation"
        val filename = "GeneratedSources"
        val annotationName = "Project"
        logger.warn("-------I SAID HEY-----------")

        val symbols = resolver
            .getSymbolsWithAnnotation(
                listOf(packageName, annotationName).joinToString("."),
                inDepth = true
            )
            .filterIsInstance<KSClassDeclaration>()
        logger.warn(symbols.joinToString(prefix = "Symbols:"))

        // Exit from the processor in case nothing is annotated
        if (!symbols.iterator().hasNext()) return emptyList()

        logger.error("-------SYMBOLS-----------")
        logger.error(symbols.joinToString())


        val fileSpecBuilder = FileSpec.builder(
            packageName = packageName,
            fileName = filename
        )
        fileSpecBuilder.addComment("This is a generated file. Do not change it.")
        fileSpecBuilder.build().writeTo(codeGenerator, Dependencies(false)) // TODO

        return emptyList()
    }
}
