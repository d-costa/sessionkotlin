/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package sessionkotlin.dsl

import java.io.Serializable

@DslMarker
annotation class SKDSL

@SKDSL
class GlobalEnv {
    internal val interactions = mutableListOf<Interaction>()
    private val roles = mutableSetOf<Role>()


    /**
     *
     * Declares that [from] should send a message of type [T] to [to].
     *
     * @param [from] role that sends the message
     * @param [to] role that receives the message
     *
     * @throws [SendingtoSelfException] if [from] and [to] are the same.
     *
     * @sample [sessionkotlin.dsl.Examples.send]
     *
     */
    fun <T: Serializable> send(from: Role, to: Role) {
        if (from == to) {
            throw SendingtoSelfException(from)
        }

        val msg = Send<T>(from, to)
        roles.add(from)
        roles.add(to)

        interactions.add(msg)
    }

    /**
     *
     * Declares an internal choice at [at].
     *
     * @param [at] role that makes the decision
     * @param [cases] block that defines the choices
     *
     * @throws [RoleNotEnabledException] if a role that is not enabled initiates an interaction.
     *
     * @sample [sessionkotlin.dsl.Examples.choice]
     *
     */
    fun choice(at: Role, cases: ChoiceEnv.() -> Unit) {
        val bEnv = ChoiceEnv()
        bEnv.cases()
        val b = Branch(at, bEnv.caseMap)

        interactions.add(b)
    }

    fun debug() {
//        println("Roles:")
//        for (r in roles) {
//            println(r)
//        }

//        println("Interactions:")
        for (i in interactions) {
            i.dump()
        }
    }
}

@SKDSL
class ChoiceEnv {
    internal val caseMap = mutableMapOf<String, GlobalEnv>()

    fun case(label: String, protocolBuilder: GlobalEnv.() -> Unit) {
        val p = GlobalEnv()
        p.protocolBuilder()
        caseMap[label] = p
    }
}

fun globalProtocol(protocolBuilder: GlobalEnv.() -> Unit): GlobalEnv {
    val p = GlobalEnv()
    p.protocolBuilder()
    return p
}